<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PMA.Api</name>
    </assembly>
    <members>
        <member name="M:PMA.Api.Controllers.ActionsController.GetActions(System.Int32,System.Int32,System.String,System.Nullable{System.Boolean})">
            <summary>
            Get all actions with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ActionsController.GetActionById(System.Int32)">
            <summary>
            Get action by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ActionsController.CreateAction(PMA.Core.Entities.Permission)">
            <summary>
            Create a new action
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ActionsController.UpdateAction(System.Int32,PMA.Core.Entities.Permission)">
            <summary>
            Update an existing action
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ActionsController.DeleteAction(System.Int32)">
            <summary>
            Delete an action
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.CalendarController.GetCalendarEvents(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get all calendar events with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.CalendarController.GetCalendarEventById(System.Int32)">
            <summary>
            Get calendar event by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.CalendarController.GetCalendarEventsByProject(System.Int32)">
            <summary>
            Get calendar events by project
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.CalendarController.GetCalendarEventsByCreator(System.Int32)">
            <summary>
            Get calendar events by creator
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.CalendarController.CreateCalendarEvent(PMA.Core.Entities.CalendarEvent)">
            <summary>
            Create a new calendar event
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.CalendarController.UpdateCalendarEvent(System.Int32,PMA.Core.Entities.CalendarEvent)">
            <summary>
            Update an existing calendar event
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.CalendarController.DeleteCalendarEvent(System.Int32)">
            <summary>
            Delete a calendar event
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.DepartmentsController.GetDepartments(System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Get all departments with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.DepartmentsController.GetDepartmentById(System.Int32)">
            <summary>
            Get department by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.DepartmentsController.CreateDepartment(PMA.Core.DTOs.DepartmentCreateDto)">
            <summary>
            Create a new department
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.DepartmentsController.UpdateDepartment(System.Int32,PMA.Core.DTOs.DepartmentUpdateDto)">
            <summary>
            Update an existing department
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.DepartmentsController.DeleteDepartment(System.Int32)">
            <summary>
            Delete a department
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.EmployeesController.GetEmployees(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Get all employees with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.EmployeesController.GetEmployeeById(System.Int32)">
            <summary>
            Get employee by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.EmployeesController.CreateEmployee(PMA.Core.Entities.Employee)">
            <summary>
            Create a new employee
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.EmployeesController.UpdateEmployee(System.Int32,PMA.Core.Entities.Employee)">
            <summary>
            Update an existing employee
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.EmployeesController.DeleteEmployee(System.Int32)">
            <summary>
            Delete an employee
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.LookupsController.GetLookups(System.Int32,System.Int32,System.String,System.Nullable{System.Boolean})">
            <summary>
            Get all lookups with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.LookupsController.GetLookupById(System.Int32)">
            <summary>
            Get lookup by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.LookupsController.GetLookupsByCategory(System.String)">
            <summary>
            Get lookups by category
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.LookupsController.CreateLookup(PMA.Core.Entities.Lookup)">
            <summary>
            Create a new lookup
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.LookupsController.UpdateLookup(System.Int32,PMA.Core.Entities.Lookup)">
            <summary>
            Update an existing lookup
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.LookupsController.DeleteLookup(System.Int32)">
            <summary>
            Delete a lookup
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.MembersTasksController.GetMemberTasks(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Get all member tasks with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.MembersTasksController.GetMemberTaskById(System.Int32)">
            <summary>
            Get member task by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.MembersTasksController.GetMemberTasksByProject(System.Int32)">
            <summary>
            Get member tasks by project
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.MembersTasksController.GetMemberTasksByAssignee(System.Int32)">
            <summary>
            Get member tasks by assignee
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.MembersTasksController.CreateMemberTask(PMA.Core.Entities.MemberTask)">
            <summary>
            Create a new member task
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.MembersTasksController.UpdateMemberTask(System.Int32,PMA.Core.Entities.MemberTask)">
            <summary>
            Update an existing member task
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.MembersTasksController.DeleteMemberTask(System.Int32)">
            <summary>
            Delete a member task
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.NotificationsController.GetNotifications(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Get all notifications with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.NotificationsController.GetNotificationById(System.Int32)">
            <summary>
            Get notification by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.NotificationsController.GetNotificationsByUser(System.Int32)">
            <summary>
            Get notifications for a specific user
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.NotificationsController.CreateNotification(PMA.Core.Entities.Notification)">
            <summary>
            Create a new notification
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.NotificationsController.UpdateNotification(System.Int32,PMA.Core.Entities.Notification)">
            <summary>
            Update an existing notification
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.NotificationsController.MarkAsRead(System.Int32)">
            <summary>
            Mark notification as read
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.NotificationsController.DeleteNotification(System.Int32)">
            <summary>
            Delete a notification
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ProjectRequirementsController.GetProjectRequirements(System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Get all project requirements with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ProjectRequirementsController.GetProjectRequirementById(System.Int32)">
            <summary>
            Get project requirement by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ProjectRequirementsController.GetProjectRequirementsByProject(System.Int32)">
            <summary>
            Get project requirements by project
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ProjectRequirementsController.CreateProjectRequirement(PMA.Core.Entities.ProjectRequirement)">
            <summary>
            Create a new project requirement
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ProjectRequirementsController.UpdateProjectRequirement(System.Int32,PMA.Core.Entities.ProjectRequirement)">
            <summary>
            Update an existing project requirement
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ProjectRequirementsController.DeleteProjectRequirement(System.Int32)">
            <summary>
            Delete a project requirement
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ProjectsController.GetProjects(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Get all projects with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ProjectsController.GetProject(System.Int32)">
            <summary>
            Get project by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ProjectsController.GetProjectStats">
            <summary>
            Get project statistics
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ProjectsController.SearchProjects(System.String,System.Nullable{System.Int32},System.String,System.Int32,System.Int32)">
            <summary>
            Search projects
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ProjectsController.CreateProject(PMA.Core.Entities.Project)">
            <summary>
            Create a new project
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ProjectsController.UpdateProject(System.Int32,PMA.Core.Entities.Project)">
            <summary>
            Update an existing project
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.ProjectsController.DeleteProject(System.Int32)">
            <summary>
            Delete a project
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.RequirementsController.GetRequirements(System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Get all requirements with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.RequirementsController.GetRequirementById(System.Int32)">
            <summary>
            Get requirement by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.RequirementsController.GetRequirementsByProject(System.Int32)">
            <summary>
            Get requirements by project
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.RequirementsController.CreateRequirement(PMA.Core.Entities.Requirement)">
            <summary>
            Create a new requirement
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.RequirementsController.UpdateRequirement(System.Int32,PMA.Core.Entities.Requirement)">
            <summary>
            Update an existing requirement
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.RequirementsController.DeleteRequirement(System.Int32)">
            <summary>
            Delete a requirement
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.RolesController.GetRoles(System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Get all roles with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.RolesController.GetRoleById(System.Int32)">
            <summary>
            Get role by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.RolesController.CreateRole(PMA.Core.Entities.Role)">
            <summary>
            Create a new role
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.RolesController.UpdateRole(System.Int32,PMA.Core.Entities.Role)">
            <summary>
            Update an existing role
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.RolesController.DeleteRole(System.Int32)">
            <summary>
            Delete a role
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.SprintsController.GetSprints(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get all sprints with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.SprintsController.GetSprintById(System.Int32)">
            <summary>
            Get sprint by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.SprintsController.GetSprintsByProject(System.Int32)">
            <summary>
            Get sprints by project
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.SprintsController.CreateSprint(PMA.Core.Entities.Sprint)">
            <summary>
            Create a new sprint
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.SprintsController.UpdateSprint(System.Int32,PMA.Core.Entities.Sprint)">
            <summary>
            Update an existing sprint
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.SprintsController.DeleteSprint(System.Int32)">
            <summary>
            Delete a sprint
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.SubtasksController.GetSubtasks(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get all subtasks with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.SubtasksController.GetSubtaskById(System.Int32)">
            <summary>
            Get subtask by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.SubtasksController.GetSubtasksByTask(System.Int32)">
            <summary>
            Get subtasks by task
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.SubtasksController.GetSubtasksByAssignee(System.Int32)">
            <summary>
            Get subtasks by assignee
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.SubtasksController.CreateSubtask(PMA.Core.Entities.SubTask)">
            <summary>
            Create a new subtask
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.SubtasksController.UpdateSubtask(System.Int32,PMA.Core.Entities.SubTask)">
            <summary>
            Update an existing subtask
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.SubtasksController.DeleteSubtask(System.Int32)">
            <summary>
            Delete a subtask
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TasksController.GetTasks(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get all tasks with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TasksController.GetTaskById(System.Int32)">
            <summary>
            Get task by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TasksController.GetTasksBySprint(System.Int32)">
            <summary>
            Get tasks by sprint
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TasksController.GetTasksByAssignee(System.Int32)">
            <summary>
            Get tasks by assignee
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TasksController.CreateTask(PMA.Core.Entities.Task)">
            <summary>
            Create a new task
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TasksController.UpdateTask(System.Int32,PMA.Core.Entities.Task)">
            <summary>
            Update an existing task
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TasksController.DeleteTask(System.Int32)">
            <summary>
            Delete a task
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TimelineController.GetTimelines(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Get all timelines with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TimelineController.GetTimelineById(System.Int32)">
            <summary>
            Get timeline by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TimelineController.GetTimelinesByProject(System.Int32)">
            <summary>
            Get timelines by project
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TimelineController.CreateTimeline(PMA.Core.Entities.Timeline)">
            <summary>
            Create a new timeline
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TimelineController.UpdateTimeline(System.Int32,PMA.Core.Entities.Timeline)">
            <summary>
            Update an existing timeline
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TimelineController.DeleteTimeline(System.Int32)">
            <summary>
            Delete a timeline
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TimelineRequirementController.GetTimelineRequirements(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get all timeline requirements with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TimelineRequirementController.GetTimelineRequirementById(System.Int32)">
            <summary>
            Get timeline requirement by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TimelineRequirementController.GetTimelineRequirementsByTimeline(System.Int32)">
            <summary>
            Get timeline requirements by timeline
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TimelineRequirementController.CreateTimelineRequirement(PMA.Core.Entities.TimelineRequirement)">
            <summary>
            Create a new timeline requirement
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TimelineRequirementController.UpdateTimelineRequirement(System.Int32,PMA.Core.Entities.TimelineRequirement)">
            <summary>
            Update an existing timeline requirement
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.TimelineRequirementController.DeleteTimelineRequirement(System.Int32)">
            <summary>
            Delete a timeline requirement
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.UnitsController.GetUnits(System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Get all units with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.UnitsController.GetUnitById(System.Int32)">
            <summary>
            Get unit by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.UnitsController.CreateUnit(PMA.Core.Entities.Unit)">
            <summary>
            Create a new unit
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.UnitsController.UpdateUnit(System.Int32,PMA.Core.Entities.Unit)">
            <summary>
            Update an existing unit
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.UnitsController.DeleteUnit(System.Int32)">
            <summary>
            Delete a unit
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.UsersController.GetUsers(System.Int32,System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Get all users with pagination and filtering
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.UsersController.GetUserById(System.Int32)">
            <summary>
            Get user by ID
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.UsersController.GetUserByUserName(System.String)">
            <summary>
            Get user by username
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.UsersController.CreateUser(PMA.Core.DTOs.CreateUserRequestDto)">
            <summary>
            Create a new user
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.UsersController.UpdateUser(System.Int32,PMA.Core.DTOs.UpdateUserRequestDto)">
            <summary>
            Update an existing user
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.UsersController.DeleteUser(System.Int32)">
            <summary>
            Delete a user
            </summary>
        </member>
        <member name="M:PMA.Api.Controllers.UsersController.GetCurrentUser">
            <summary>
            Get current user profile
            </summary>
        </member>
        <member name="T:PMA.Api.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:PMA.Api.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:PMA.Api.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:PMA.Api.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:PMA.Api.Migrations.UpdateAnalystIdsToIntList">
            <inheritdoc />
        </member>
        <member name="M:PMA.Api.Migrations.UpdateAnalystIdsToIntList.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:PMA.Api.Migrations.UpdateAnalystIdsToIntList.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:PMA.Api.Migrations.UpdateAnalystIdsToIntList.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
    </members>
</doc>
