import { useState } from "react";
import { Card, CardBody, CardHeader, CardFooter } from "@heroui/card";
import { Button } from "@heroui/button";
import { Chip } from "@heroui/chip";
import { Progress } from "@heroui/progress";
import { Avatar, AvatarGroup } from "@heroui/avatar";
import { Badge } from "@heroui/badge";
import { Divider } from "@heroui/divider";
import { Select, SelectItem } from "@heroui/select";
import {
  Table,
  TableHeader,
  TableColumn,
  TableBody,
  TableRow,
  TableCell,
} from "@heroui/table";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from "recharts";
import {
  AlertTriangle,
  Clock,
  FileText,
  Users,
  TrendingUp,
  Calendar,
  CheckCircle,
  AlertCircle,
  Info,
  Eye,
  Settings,
  ArrowRight,
} from "lucide-react";

import DefaultLayout from "@/layouts/default";
import { useLanguage } from "@/contexts/LanguageContext";

// Types
interface ProjectPipelineStage {
  stage: string;
  count: number;
  color: string;
  clickable?: boolean;
}

interface NotificationCard {
  title: string;
  count: number;
  details: string;
  action: string;
  icon: React.ReactNode;
  color: "danger" | "warning" | "primary";
}

interface TeamWorkload {
  name: string;
  activeProjects: number;
  pendingProjects: number;
  reqCompleted: number;
  avgTurnaround: string;
}

interface ActivityItem {
  timestamp: string;
  project: string;
  action: string;
  user: string;
  type: "status_change" | "requirement_added" | "change_request" | "assignment";
}

export default function IndexPage() {
  const { t, language } = useLanguage();
  const [timeFilter, setTimeFilter] = useState("7days");

  // Mock data for Project Pipeline
  const pipelineData: ProjectPipelineStage[] = [
    { stage: "Draft", count: 2, color: "#94a3b8" },
    { stage: "Under Review", count: 5, color: "#f59e0b", clickable: true },
    { stage: "Analysis in Progress", count: 8, color: "#3b82f6" },
    { stage: "Requirements Complete", count: 3, color: "#10b981" },
    { stage: "Awaiting Dev", count: 4, color: "#8b5cf6" },
  ];

  // Mock data for Notifications
  const notifications: NotificationCard[] = [
    {
      title: "Projects Under Review",
      count: 5,
      details: "Requires your immediate review for analysis assignment.",
      action: "Review Now",
      icon: <AlertCircle className="w-5 h-5" />,
      color: "danger",
    },
    {
      title: "Overdue Tasks",
      count: 2,
      details: "Team Alpha: Add requirements for 'CRM Integration' by EOD.",
      action: "Go to Task",
      icon: <Clock className="w-5 h-5" />,
      color: "warning",
    },
    {
      title: "New Change Requests",
      count: 3,
      details: "New change requests received for 'Website Redesign'.",
      action: "View Requests",
      icon: <Info className="w-5 h-5" />,
      color: "primary",
    },
  ];

  // Mock data for Team Workload
  const teamData: TeamWorkload[] = [
    { name: "Team Alpha", activeProjects: 4, pendingProjects: 1, reqCompleted: 12, avgTurnaround: "2.5 days" },
    { name: "Team Beta", activeProjects: 6, pendingProjects: 0, reqCompleted: 18, avgTurnaround: "1.8 days" },
    { name: "Team Gamma", activeProjects: 3, pendingProjects: 2, reqCompleted: 8, avgTurnaround: "3.2 days" },
  ];

  // Data for Team Workload Chart
  const teamChartData = teamData.map(team => ({
    name: team.name.replace("Team ", ""),
    active: team.activeProjects,
    pending: team.pendingProjects,
  }));

  const COLORS = ['#3b82f6', '#f59e0b', '#10b981', '#ef4444'];

  // Mock data for Recent Activity
  const recentActivity: ActivityItem[] = [
    {
      timestamp: "2 hours ago",
      project: "E-commerce Platform",
      action: "Status changed to 'Under Review'",
      user: "Sarah Johnson",
      type: "status_change",
    },
    {
      timestamp: "4 hours ago",
      project: "E-commerce Platform",
      action: "Added 5 new requirements",
      user: "Team Alpha",
      type: "requirement_added",
    },
    {
      timestamp: "6 hours ago",
      project: "Mobile App Redesign",
      action: "New Change Request #CR001 submitted",
      user: "John Smith",
      type: "change_request",
    },
    {
      timestamp: "1 day ago",
      project: "Mobile App Redesign",
      action: "Assigned to Team Beta",
      user: "Mike Wilson",
      type: "assignment",
    },
  ];

  const getActivityIcon = (type: string) => {
    switch (type) {
      case "status_change":
        return <TrendingUp className="w-4 h-4 text-blue-500" />;
      case "requirement_added":
        return <FileText className="w-4 h-4 text-green-500" />;
      case "change_request":
        return <AlertTriangle className="w-4 h-4 text-orange-500" />;
      case "assignment":
        return <Users className="w-4 h-4 text-purple-500" />;
      default:
        return <Info className="w-4 h-4 text-gray-500" />;
    }
  };

  return (
    <DefaultLayout>
      <div className={`space-y-6 p-6 ${language === "ar" ? "rtl" : "ltr"}`}>
        {/* Header with Filters */}
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold text-foreground">Dashboard</h1>
            <p className="text-default-600 mt-1">Project Management Overview</p>
          </div>
          <div className="flex gap-3">
            <Select
              label="Time Period"
              selectedKeys={[timeFilter]}
              onSelectionChange={(keys) => setTimeFilter(Array.from(keys)[0] as string)}
              className="w-40"
              size="sm"
            >
              <SelectItem key="7days">Last 7 Days</SelectItem>
              <SelectItem key="month">This Month</SelectItem>
              <SelectItem key="all">All Time</SelectItem>
            </Select>
          </div>
        </div>

        {/* Top Row: Pipeline and Notifications */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Section 1: My Project Pipeline */}
          <Card className="p-6">
            <CardHeader className="px-0 pt-0">
              <div className="flex justify-between items-center w-full">
                <h2 className="text-xl font-semibold">My Project Pipeline</h2>
                <Button variant="light" size="sm" endContent={<ArrowRight className="w-4 h-4" />}>
                  View All Projects
                </Button>
              </div>
            </CardHeader>
            <CardBody className="px-0 pb-0">
              <div className="space-y-4">
                {pipelineData.map((stage, index) => (
                  <div key={index} className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div 
                        className="w-4 h-4 rounded"
                        style={{ backgroundColor: stage.color }}
                      />
                      <span className="font-medium">{stage.stage}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Chip 
                        color={stage.clickable ? "warning" : "default"}
                        variant={stage.clickable ? "solid" : "flat"}
                        className={stage.clickable ? "cursor-pointer" : ""}
                      >
                        {stage.count} Projects
                      </Chip>
                      {stage.clickable && <Eye className="w-4 h-4 text-warning-500" />}
                    </div>
                  </div>
                ))}
              </div>
              
              {/* Visual Pipeline Bar */}
              <div className="mt-6">
                <div className="flex h-8 rounded-lg overflow-hidden">
                  {pipelineData.map((stage, index) => {
                    const total = pipelineData.reduce((sum, s) => sum + s.count, 0);
                    const width = (stage.count / total) * 100;
                    return (
                      <div
                        key={index}
                        className="flex items-center justify-center text-white text-xs font-medium"
                        style={{ 
                          backgroundColor: stage.color, 
                          width: `${width}%`,
                          minWidth: '20px'
                        }}
                        title={`${stage.stage}: ${stage.count} projects`}
                      >
                        {stage.count}
                      </div>
                    );
                  })}
                </div>
              </div>
            </CardBody>
          </Card>

          {/* Section 2: Urgent Attention / Notifications */}
          <Card className="p-6">
            <CardHeader className="px-0 pt-0">
              <h2 className="text-xl font-semibold">Urgent Attention</h2>
            </CardHeader>
            <CardBody className="px-0 pb-0">
              <div className="space-y-4">
                {notifications.map((notification, index) => (
                  <Card key={index} className={`border-l-4 border-${notification.color}`}>
                    <CardBody className="p-4">
                      <div className="flex items-start justify-between">
                        <div className="flex items-start gap-3">
                          <div className={`p-2 rounded-lg bg-${notification.color}/10`}>
                            {notification.icon}
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-1">
                              <h3 className="font-semibold">{notification.title}</h3>
                              <Badge color={notification.color} variant="solid">
                                {notification.count}
                              </Badge>
                            </div>
                            <p className="text-sm text-default-600">{notification.details}</p>
                          </div>
                        </div>
                      </div>
                      <div className="mt-3">
                        <Button 
                          color={notification.color} 
                          size="sm" 
                          variant="flat"
                          fullWidth
                        >
                          {notification.action}
                        </Button>
                      </div>
                    </CardBody>
                  </Card>
                ))}
              </div>
            </CardBody>
          </Card>
        </div>

        {/* Middle Row: Team Workload and Requirements */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Section 3: Team Workload & Performance */}
          <Card className="p-6">
            <CardHeader className="px-0 pt-0">
              <div className="flex justify-between items-center w-full">
                <h2 className="text-xl font-semibold">Team Workload & Performance</h2>
                <Button variant="light" size="sm" endContent={<Settings className="w-4 h-4" />}>
                  Manage Teams
                </Button>
              </div>
            </CardHeader>
            <CardBody className="px-0 pb-0">
              <div className="mb-6">
                <ResponsiveContainer width="100%" height={200}>
                  <BarChart data={teamChartData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Bar dataKey="active" fill="#3b82f6" name="Active" />
                    <Bar dataKey="pending" fill="#f59e0b" name="Pending" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
              
              <Table aria-label="Team performance table">
                <TableHeader>
                  <TableColumn>Team</TableColumn>
                  <TableColumn>Projects</TableColumn>
                  <TableColumn>Req. Completed</TableColumn>
                  <TableColumn>Avg. Turnaround</TableColumn>
                </TableHeader>
                <TableBody>
                  {teamData.map((team, index) => (
                    <TableRow key={index}>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Avatar name={team.name.split(' ')[1]} size="sm" />
                          {team.name}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex gap-1">
                          <Chip size="sm" color="primary">{team.activeProjects} Active</Chip>
                          {team.pendingProjects > 0 && (
                            <Chip size="sm" color="warning">{team.pendingProjects} Pending</Chip>
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <TrendingUp className="w-4 h-4 text-green-500" />
                          {team.reqCompleted}
                        </div>
                      </TableCell>
                      <TableCell>{team.avgTurnaround}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardBody>
          </Card>

          {/* Section 4: Requirements Overview */}
          <Card className="p-6">
            <CardHeader className="px-0 pt-0">
              <div className="flex justify-between items-center w-full">
                <h2 className="text-xl font-semibold">Requirements Overview</h2>
                <Button variant="light" size="sm" endContent={<Eye className="w-4 h-4" />}>
                  View All Requirements Log
                </Button>
              </div>
            </CardHeader>
            <CardBody className="px-0 pb-0">
              <div className="grid grid-cols-2 gap-4 mb-6">
                <Card className="p-4 bg-blue-50 dark:bg-blue-950/20">
                  <div className="text-center">
                    <p className="text-2xl font-bold text-blue-600">25</p>
                    <p className="text-sm text-blue-600">New Requirements</p>
                    <p className="text-xs text-default-500">This Month</p>
                  </div>
                </Card>
                <Card className="p-4 bg-orange-50 dark:bg-orange-950/20">
                  <div className="text-center">
                    <p className="text-2xl font-bold text-orange-600">12</p>
                    <p className="text-sm text-orange-600">Change Requests</p>
                    <p className="text-xs text-default-500">This Month</p>
                  </div>
                </Card>
              </div>

              <div className="space-y-4">
                <div className="flex justify-between items-center p-4 bg-default-50 dark:bg-default-100/50 rounded-lg">
                  <div className="flex items-center gap-3">
                    <FileText className="w-5 h-5 text-green-500" />
                    <span className="font-medium">Total Active Requirements</span>
                  </div>
                  <Chip color="success" variant="solid">125</Chip>
                </div>
                
                <div className="flex justify-between items-center p-4 bg-default-50 dark:bg-default-100/50 rounded-lg">
                  <div className="flex items-center gap-3">
                    <Clock className="w-5 h-5 text-warning-500" />
                    <span className="font-medium">Pending Approval</span>
                  </div>
                  <Chip color="warning" variant="solid">15</Chip>
                </div>
              </div>

              {/* Requirements Chart */}
              <div className="mt-6">
                <ResponsiveContainer width="100%" height={150}>
                  <BarChart data={[
                    { name: 'New', value: 25, color: '#3b82f6' },
                    { name: 'In Review', value: 15, color: '#f59e0b' },
                    { name: 'Approved', value: 85, color: '#10b981' },
                    { name: 'Changes', value: 12, color: '#ef4444' },
                  ]}>
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Bar dataKey="value" fill="#3b82f6" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </CardBody>
          </Card>
        </div>

        {/* Bottom Row: Recent Activity Feed */}
        <Card className="p-6">
          <CardHeader className="px-0 pt-0">
            <h2 className="text-xl font-semibold">Recent Activity Feed</h2>
          </CardHeader>
          <CardBody className="px-0 pb-0">
            <div className="space-y-4">
              {recentActivity.map((activity, index) => (
                <div key={index} className="flex items-start gap-4 p-4 hover:bg-default-50 dark:hover:bg-default-100/50 rounded-lg transition-colors">
                  <div className="mt-1">
                    {getActivityIcon(activity.type)}
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 flex-wrap">
                      <span className="text-sm text-default-500">{activity.timestamp}</span>
                      <Chip size="sm" variant="flat">{activity.project}</Chip>
                    </div>
                    <p className="text-sm mt-1">
                      <span className="font-medium">{activity.action}</span>
                      <span className="text-default-600"> by </span>
                      <span className="font-medium text-primary">{activity.user}</span>
                    </p>
                  </div>
                  <Button 
                    isIconOnly 
                    variant="light" 
                    size="sm"
                    className="opacity-0 group-hover:opacity-100 transition-opacity"
                  >
                    <ArrowRight className="w-4 h-4" />
                  </Button>
                </div>
              ))}
            </div>
            
            <div className="mt-6 text-center">
              <Button variant="flat" color="primary">
                View All Activity
              </Button>
            </div>
          </CardBody>
        </Card>
      </div>
    </DefaultLayout>
  );
}
        {/* Header */}
        <div className="text-center space-y-4">
          <h1 className="text-4xl font-bold text-foreground">
            {t("dashboard.title")}
          </h1>
          <p className="text-lg text-default-600">{t("dashboard.subtitle")}</p>

          <div className="flex gap-4 justify-center">
            <Button color="primary" size="lg">
              {t("dashboard.newProject")}
            </Button>
            <Button size="lg" variant="bordered">
              {t("dashboard.importData")}
            </Button>
          </div>
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Card className="p-4">
            <div className="text-center space-y-2">
              <p className="text-3xl font-bold text-success">3</p>
              <p className="text-sm text-default-600">
                {t("dashboard.activeProjects")}
              </p>
            </div>
          </Card>
          <Card className="p-4">
            <div className="text-center space-y-2">
              <p className="text-3xl font-bold text-primary">8</p>
              <p className="text-sm text-default-600">
                {t("dashboard.totalTasks")}
              </p>
            </div>
          </Card>
          <Card className="p-4">
            <div className="text-center space-y-2">
              <p className="text-3xl font-bold text-warning">5</p>
              <p className="text-sm text-default-600">
                {t("dashboard.inProgress")}
              </p>
            </div>
          </Card>
          <Card className="p-4">
            <div className="text-center space-y-2">
              <p className="text-3xl font-bold text-danger">2</p>
              <p className="text-sm text-default-600">
                {t("dashboard.overdue")}
              </p>
            </div>
          </Card>
        </div>

        {/* Projects Grid */}
        <div className="space-y-6">
          <h2 className="text-2xl font-semibold text-foreground">
            {t("dashboard.activeProjects")}
          </h2>

          <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            {projects.map((project) => (
              <Card key={project.id} className="w-full">
                <CardHeader className="flex gap-3">
                  <div className="flex flex-col flex-1">
                    <p className="text-md font-semibold">{project.name}</p>
                    <p className="text-small text-default-500">
                      {project.description}
                    </p>
                  </div>
                  <Chip
                    color={getStatusColor(project.status)}
                    size="sm"
                    variant="flat"
                  >
                    {getStatusText(project.status)}
                  </Chip>
                </CardHeader>
                <Divider />
                <CardBody className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>{t("dashboard.progress")}</span>
                      <span>{project.progress}%</span>
                    </div>
                    <Progress
                      aria-label={`${t("common.progress")}: ${project.progress}%`}
                      className="w-full"
                      color={getProgressColor(project.progress)}
                      value={project.progress}
                    />
                  </div>

                  <div className="flex justify-between items-center">
                    <span className="text-sm text-default-600">
                      {t("dashboard.due")}: {project.dueDate}
                    </span>
                    <AvatarGroup isBordered max={3} size="sm">
                      {project.team.map((member, index) => (
                        <Avatar key={index} name={member} size="sm" />
                      ))}
                    </AvatarGroup>
                  </div>

                  <Badge color="primary" content={project.tasks.length}>
                    <Button fullWidth size="sm" variant="flat">
                      {t("dashboard.tasks")}
                    </Button>
                  </Badge>
                </CardBody>
                <CardFooter>
                  <Button
                    fullWidth
                    color="primary"
                    variant="light"
                    onPress={() => openProjectDetails(project)}
                  >
                    {t("dashboard.viewDetails")}
                  </Button>
                </CardFooter>
              </Card>
            ))}
          </div>
        </div>

        {/* Recent Tasks Accordion */}
        <div className="space-y-4">
          <h2 className="text-2xl font-semibold text-foreground">
            {t("dashboard.recentTasks")}
          </h2>

          <Accordion variant="splitted">
            {projects.map((project) => (
              <AccordionItem
                key={project.id}
                aria-label={project.name}
                startContent={
                  <Chip
                    color={getStatusColor(project.status)}
                    size="sm"
                    variant="dot"
                  >
                    {getStatusText(project.status)}
                  </Chip>
                }
                subtitle={`${project.tasks.length} ${t("dashboard.tasks")}`}
                title={project.name}
              >
                <div className="space-y-3">
                  {project.tasks.map((task) => (
                    <Card key={task.id} className="p-3">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <Avatar name={task.assignee} size="sm" />
                          <div>
                            <p className="font-medium">{task.title}</p>
                            <p className="text-sm text-default-500">
                              {t("dashboard.assignedTo")} {task.assignee}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <Chip
                            color={getStatusColor(task.status)}
                            size="sm"
                            variant="flat"
                          >
                            {getStatusText(task.status)}
                          </Chip>
                          <Chip
                            color={getPriorityColor(task.priority)}
                            size="sm"
                            variant="dot"
                          >
                            {getPriorityText(task.priority)}
                          </Chip>
                          <span className="text-sm text-default-500">
                            {task.dueDate}
                          </span>
                        </div>
                      </div>
                    </Card>
                  ))}
                </div>
        </Card>
      </div>
    </DefaultLayout>
  );
}
