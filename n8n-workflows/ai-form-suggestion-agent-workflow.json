{
  "name": "AI Form Suggestion with Agent",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-suggest-agent",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook - Agent Request",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "ai-suggest-agent-form"
    },
    {
      "parameters": {
        "jsCode": "// Extract and prepare request data for agent\nconst body = $input.item.json.body;\nconst context = body.context || '';\nconst field = body.field || '';\nconst previousValues = body.previousValues || {};\nconst conversationHistory = body.conversationHistory || [];\n\n// Simply pass the user's context as-is to allow natural conversation\n// The agent's system message will handle how to respond\nlet chatInput = context;\n\n// Add project information if available\nif (Object.keys(previousValues).length > 0) {\n  chatInput += '\\n\\nمعلومات المشروع:\\n';\n  for (const [key, value] of Object.entries(previousValues)) {\n    chatInput += `- ${key}: ${value}\\n`;\n  }\n}\n\nreturn {\n  json: {\n    chatInput: chatInput,\n    originalContext: context,\n    field: field,\n    previousValues: previousValues\n  }\n};"
      },
      "id": "prepare-input",
      "name": "Prepare Agent Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "أنت محلل متطلبات برمجية خبير متخصص في كتابة متطلبات تقنية احترافية. يمكنك التحدث مع المستخدم لفهم احتياجاته بشكل أفضل.\n\nقواعد الرد:\n1. إذا سألك المستخدم سؤالاً أو طلب توضيحاً، أجب بشكل مهذب ومفيد\n2. إذا طلب منك كتابة وصف تقني، اكتبه مباشرة دون مقدمات\n3. عند كتابة الوصف التقني:\n   - استخدم 3-5 جمل متماسكة\n   - ركز على: الهدف، الوظائف الأساسية، المعايير التقنية (APIs, قواعد البيانات، frameworks)، معايير الأداء\n   - استخدم مصطلحات تقنية دقيقة\n   - لا تكتب عناوين أو أرقام أو نقاط\n   - ابدأ مباشرة بالوصف دون كتابة \"الوصف:\" أو \"المتطلب:\"\n4. اكتب بالعربية الفصحى إذا كان السياق بالعربية، وبالإنجليزية إذا كان بالإنجليزية\n5. استخدم المعلومات من المحادثة السابقة لتحسين الوصف\n6. يمكنك طلب معلومات إضافية إذا كان السياق غير واضح\n\nمثال محادثة:\nمستخدم: \"مرحبا\"\nأنت: \"مرحباً! أنا هنا لمساعدتك في كتابة متطلبات برمجية تقنية احترافية. كيف يمكنني مساعدتك اليوم؟\"\n\nمستخدم: \"اكتب وصف لنظام مصادقة\"\nأنت: \"تطوير نظام مصادقة شامل يدعم OAuth2 وJWT tokens لضمان الوصول الآمن للموارد. يجب أن يتكامل النظام مع قاعدة بيانات PostgreSQL لتخزين بيانات المستخدمين والجلسات، ويوفر APIs RESTful للتسجيل وتسجيل الدخول وإعادة تعيين كلمة المرور. سيتضمن النظام آلية تشفير bcrypt للبيانات الحساسة، ونظام إدارة الأدوار والصلاحيات (RBAC)، مع تسجيل جميع محاولات الدخول للأغراض الأمنية.\"\n\nمستخدم: \"أضف ميزة إعادة تعيين كلمة المرور\"\nأنت: \"تطوير نظام مصادقة شامل يدعم OAuth2 وJWT tokens لضمان الوصول الآمن للموارد، مع آلية متقدمة لإعادة تعيين كلمة المرور عبر البريد الإلكتروني. يجب أن يتكامل النظام مع قاعدة بيانات PostgreSQL لتخزين بيانات المستخدمين والجلسات، ويوفر APIs RESTful للتسجيل وتسجيل الدخول وإدارة كلمات المرور. سيتضمن النظام آلية تشفير bcrypt للبيانات الحساسية، وإنشاء رموز مؤقتة (tokens) صالحة لمدة محدودة لإعادة التعيين، مع نظام إدارة الأدوار والصلاحيات (RBAC) وتسجيل جميع العمليات الأمنية.\""
        },
        "text": "={{ $json.chatInput }}",
        "hasOutputParser": false
      },
      "id": "ai-agent",
      "name": "AI Agent - Requirements Analyst",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [650, 300]
    },
    {
      "parameters": {
        "model": "llama3.1:8b",
        "options": {
          "baseUrl": "http://localhost:11434",
          "temperature": 0.4,
          "numPredict": 300
        }
      },
      "id": "ollama-chat",
      "name": "Ollama Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [650, 450]
    },
    {
      "parameters": {},
      "id": "output-parser",
      "name": "Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1,
      "position": [650, 600]
    },
    {
      "parameters": {
        "jsCode": "// Extract agent response\nconst agentOutput = $input.item.json;\nconst preparedInput = $('Prepare Agent Input').item.json;\n\n// Get the suggestion text from agent output\nlet suggestion = '';\nif (typeof agentOutput.output === 'string') {\n  suggestion = agentOutput.output.trim();\n} else if (agentOutput.text) {\n  suggestion = agentOutput.text.trim();\n} else {\n  suggestion = JSON.stringify(agentOutput);\n}\n\n// Clean up common unwanted prefixes and formatting\nconst prefixesToRemove = [\n  'Description:',\n  'وصف:',\n  '\"',\n  \"'\",\n  'Task Description:',\n  'وصف المهمة:',\n  'Here is',\n  'Here\\'s',\n  'إليك',\n  'الوصف:'\n];\n\nfor (const prefix of prefixesToRemove) {\n  if (suggestion.toLowerCase().startsWith(prefix.toLowerCase())) {\n    suggestion = suggestion.substring(prefix.length).trim();\n  }\n}\n\n// Remove trailing quotes\nif (suggestion.endsWith('\"') || suggestion.endsWith(\"'\")) {\n  suggestion = suggestion.slice(0, -1).trim();\n}\nif (suggestion.startsWith('\"') || suggestion.startsWith(\"'\")) {\n  suggestion = suggestion.substring(1).trim();\n}\n\n// Format response for frontend\nreturn {\n  json: {\n    success: true,\n    data: {\n      suggestion: suggestion,\n      confidence: 0.9,\n      metadata: {\n        field: preparedInput.field,\n        context: preparedInput.originalContext,\n        model: 'llama3.1:8b',\n        language: preparedInput.detectedLanguage,\n        agentType: 'langchain-agent',\n        timestamp: new Date().toISOString()\n      }\n    },\n    message: 'Suggestion generated successfully with AI Agent'\n  }\n};"
      },
      "id": "format-response",
      "name": "Format Agent Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "webhook-response",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "jsCode": "// Handle errors gracefully\nconst error = $input.item.json.error || $input.item.json;\n\nreturn {\n  json: {\n    success: false,\n    data: null,\n    message: error.message || 'Failed to generate suggestion with agent',\n    error: {\n      type: error.name || 'AgentError',\n      details: error.stack || JSON.stringify(error)\n    }\n  }\n};"
      },
      "id": "error-handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseCode": 500
        }
      },
      "id": "error-response",
      "name": "Send Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1050, 500]
    }
  ],
  "connections": {
    "Webhook - Agent Request": {
      "main": [
        [
          {
            "node": "Prepare Agent Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Agent Input": {
      "main": [
        [
          {
            "node": "AI Agent - Requirements Analyst",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent - Requirements Analyst": {
      "main": [
        [
          {
            "node": "Format Agent Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent - Requirements Analyst",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent - Requirements Analyst",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Format Agent Response": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Send Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["AI", "Agent", "LangChain", "Requirements"],
  "triggerCount": 0,
  "updatedAt": "2025-10-17T00:00:00.000Z",
  "versionId": "1"
}
