{
  "name": "AI Form Suggestion Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-suggest",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook - Form Suggestion Request",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "ai-suggest-form"
    },
    {
      "parameters": {
        "jsCode": "// Extract request data\nconst body = $input.item.json.body;\nconst context = body.context || '';\nconst field = body.field || '';\nconst previousValues = body.previousValues || {};\nconst maxTokens = body.maxTokens || 150;\nconst conversationHistory = body.conversationHistory || []; // NEW: Accept conversation history\n\n// Detect if context is in Arabic\nconst arabicRegex = /[\\u0600-\\u06FF]/;\nconst isArabic = arabicRegex.test(context) || arabicRegex.test(field);\n\n// Build conversation history context\nlet historyContext = '';\nif (conversationHistory.length > 0) {\n  if (isArabic) {\n    historyContext = '\\n\\nالمحادثة السابقة:\\n';\n    conversationHistory.forEach(msg => {\n      const role = msg.role === 'user' ? 'المستخدم' : 'المساعد';\n      historyContext += `${role}: ${msg.content}\\n`;\n    });\n    historyContext += '\\nاستخدم المحادثة السابقة كسياق لتحسين الإجابة الحالية، لكن لا تكرر نفس المعلومات.\\n';\n  } else {\n    historyContext = '\\n\\nPrevious Conversation:\\n';\n    conversationHistory.forEach(msg => {\n      const role = msg.role === 'user' ? 'User' : 'Assistant';\n      historyContext += `${role}: ${msg.content}\\n`;\n    });\n    historyContext += '\\nUse the previous conversation as context to improve the current response, but do not repeat the same information.\\n';\n  }\n}\n\n// Build prompt for Ollama with language detection\nlet prompt = '';\n\nif (isArabic) {\n  // Arabic prompt - Enhanced for software requirements\n  prompt = `أنت محلل متطلبات برمجية خبير متخصص في كتابة متطلبات تقنية احترافية بالعربية.${historyContext}\\n\\nالمهمة: كتابة وصف تقني مفصل ومهني لمتطلب برمجي.\\n\\nالسياق المقدم من المستخدم: ${context}`;\n  \n  if (Object.keys(previousValues).length > 0) {\n    prompt += `\\n\\nمعلومات المشروع:`;\n    for (const [key, value] of Object.entries(previousValues)) {\n      prompt += `\\n- ${key}: ${value}`;\n    }\n  }\n  \n  prompt += `\\n\\nالحقل المطلوب: ${field}\\n\\nمعايير الكتابة الإلزامية:\\n1. استخدم اللغة العربية الفصحى الواضحة فقط\\n2. اكتب وصفاً تقنياً شاملاً يغطي:\\n   - الهدف من المتطلب\\n   - الوظائف الأساسية المطلوبة\\n   - المعايير التقنية (APIs, قواعد البيانات, الخ)\\n   - معايير الأداء والجودة\\n3. استخدم مصطلحات تقنية دقيقة\\n4. اكتب 3-5 جمل متماسكة\\n5. لا تكتب عناوين أو أرقام\\n\\nمثال لوصف احترافي:\\n\"تطوير مكون React قابل لإعادة الاستخدام لإدارة عملية تسجيل الدخول بشكل آمن. يجب أن يتكامل المكون مع واجهة برمجة RESTful API لمصادقة المستخدمين، ويدعم التحقق من صحة البيانات المدخلة، وإدارة حالات الجلسة باستخدام JWT tokens. يتضمن المتطلب أيضاً تتبع تحليلات سلوك المستخدم وتسجيل محاولات الدخول، مع ضمان تجربة مستخدم سلسة عبر أجهزة مختلفة.\"\\n\\nابدأ الكتابة مباشرة:`;\n} else {\n  // English prompt - Enhanced for software requirements\n  prompt = `You are an expert software requirements analyst specializing in writing professional, technical requirement descriptions.${historyContext}\\n\\nTask: Write a detailed, professional description for a software requirement.\\n\\nUser Context: ${context}`;\n  \n  if (Object.keys(previousValues).length > 0) {\n    prompt += `\\n\\nProject Information:`;\n    for (const [key, value] of Object.entries(previousValues)) {\n      prompt += `\\n- ${key}: ${value}`;\n    }\n  }\n  \n  prompt += `\\n\\nField to generate: ${field}\\n\\nMandatory Writing Criteria:\\n1. Use clear, professional English only\\n2. Write a comprehensive technical description covering:\\n   - Purpose and objective of the requirement\\n   - Core functionalities needed\\n   - Technical standards (APIs, databases, frameworks, etc.)\\n   - Performance and quality criteria\\n3. Use precise technical terminology\\n4. Write 3-5 coherent sentences\\n5. Do NOT include headings or numbering\\n\\nExample of professional description:\\n\"Develop a reusable React component for secure user authentication management. The component must integrate with RESTful API endpoints for user validation, support input validation, and manage session states using JWT tokens. The requirement includes implementing user behavior analytics tracking and login attempt logging, while ensuring a seamless user experience across different devices and screen sizes.\"\\n\\nWrite directly without any prefix:`;\n}\n\n// Return structured data for Ollama\nreturn {\n  json: {\n    model: 'llama3.1:8b',  // Better than Mistral for Arabic\n    prompt: prompt,\n    stream: false,\n    options: {\n      temperature: 0.4,        // Slightly higher for more creative/detailed responses\n      top_p: 0.92,             // Better token selection\n      top_k: 50,               // Limits vocabulary for more focused responses\n      num_predict: maxTokens,\n      repeat_penalty: 1.15,    // Reduced to allow technical term repetition\n      frequency_penalty: 0.5,  // Reduces redundancy\n      presence_penalty: 0.3    // Encourages diverse vocabulary\n    },\n    originalRequest: {\n      context,\n      field,\n      previousValues,\n      conversationHistory,\n      detectedLanguage: isArabic ? 'ar' : 'en'\n    }\n  }\n};"
      },
      "id": "build-prompt",
      "name": "Build Ollama Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:11434/api/generate",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "={{ $json.model }}"
            },
            {
              "name": "prompt",
              "value": "={{ $json.prompt }}"
            },
            {
              "name": "stream",
              "value": "={{ $json.stream }}"
            },
            {
              "name": "options",
              "value": "={{ $json.options }}"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "ollama-request",
      "name": "Call Ollama API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract Ollama response\nconst ollamaResponse = $input.item.json;\nlet suggestion = ollamaResponse.response?.trim() || '';\nconst originalRequest = $('Build Ollama Prompt').item.json.originalRequest;\n\n// Clean up common unwanted prefixes\nconst prefixesToRemove = [\n  'Description:',\n  'وصف:',\n  '\"',\n  \"'\",\n  'Task Description:',\n  'وصف المهمة:'\n];\n\nfor (const prefix of prefixesToRemove) {\n  if (suggestion.startsWith(prefix)) {\n    suggestion = suggestion.substring(prefix.length).trim();\n  }\n  if (suggestion.endsWith('\"') || suggestion.endsWith(\"'\")) {\n    suggestion = suggestion.slice(0, -1).trim();\n  }\n}\n\n// Format response for frontend\nreturn {\n  json: {\n    success: true,\n    data: {\n      suggestion: suggestion,\n      confidence: 0.85,\n      metadata: {\n        field: originalRequest.field,\n        context: originalRequest.context,\n        model: 'mistral:7b-instruct',\n        language: originalRequest.detectedLanguage,\n        totalDuration: ollamaResponse.total_duration,\n        evalCount: ollamaResponse.eval_count\n      }\n    },\n    message: 'Suggestion generated successfully'\n  }\n};"
      },
      "id": "format-response",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "webhook-response",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "jsCode": "// Handle errors gracefully\nconst error = $input.item.json.error || $input.item.json;\n\nreturn {\n  json: {\n    success: false,\n    data: null,\n    message: error.message || 'Failed to generate suggestion',\n    error: {\n      type: error.name || 'UnknownError',\n      details: error.stack || JSON.stringify(error)\n    }\n  }\n};"
      },
      "id": "error-handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseCode": 500
        }
      },
      "id": "error-response",
      "name": "Send Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1050, 500]
    }
  ],
  "connections": {
    "Webhook - Form Suggestion Request": {
      "main": [
        [
          {
            "node": "Build Ollama Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Ollama Prompt": {
      "main": [
        [
          {
            "node": "Call Ollama API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Ollama API": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Send Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-15T00:00:00.000Z",
  "versionId": "2"
}